{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/depthFirstSearch.jsx","Menu/Menu.jsx","maze/maze.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","is2xWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","isVisited","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","unweightedAlgorithm","endNode","algorithm","stack","sortedStack","pop","getNeighbors","shuffle","a","i","j","Math","floor","random","AlgorithmDescription","Menu","algorithmSelected","algorithmDescription","src","width","height","alt","Container","Row","Col","Dropdown","Toggle","variant","Item","onClick","setAlgorithm","generateMaze","Button","resetGrid","disabled","algorithmInProgress","visualizeAlgorithm","setWall","algorithmWeighted","setSpeed","algorithmSpeed","SLOW","MEDIUM","FAST","direction","SOUTH","EAST","recursiveDivision","columns","rows","wallsGeneratedInOrder","generateOuterWalls","x","y","orientation","horizontal","wallX","wallY","directionX","directionY","divide","chooseOrientation","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","componentDidMount","getInitialGrid","setState","handleMouseDown","newGrid","state","startNodeSelected","finishNodeSelected","getNewGridWithWallToggled","wallTypeSelected","mouseIsPressed","handleMouseEnter","updateGridWithNewStartNode","updateGridWithNewFinishNode","handleMouseUp","animateAlgorithm","nodesInShortestPathOrder","setTimeout","animateShortestPath","document","getElementById","extraClass","visualizeAlgorithmHandler","console","log","currentNode","unshift","getNodesInShortestPathOrder","resetGridHandler","setAlgorithmHandler","isAlgorithmSelectedWeighted","setSpeedHandler","speed","setWallHandler","wall","generateMazeHandler","generatedWallsInOrder","Fragment","map","rowIdx","key","nodeIdx","currentRow","createNode","animationDirection","wallType","slice","newNode","prevStartRow","prevStartCol","newStartNode","prevFinishRow","prevFinishCol","newFinishNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e1114a1.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      is2xWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : is2xWall\r\n      ? 'node-2x-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  startNode.isVisited = true;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    if (node.is2xWall) {\r\n      neighbor.distance = node.distance + 5;\r\n    } else {\r\n      neighbor.distance = node.distance + 1;\r\n    }\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// Performs either weightedAlgorithm or Breadth First Search algorithm;\r\n// returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function unweightedAlgorithm(grid, startNode, endNode, algorithm) {\r\n  const visitedNodesInOrder = [];\r\n  const stack = [];\r\n  startNode.isVisited = true;\r\n  stack.push(startNode);\r\n  startNode.distance = 0;\r\n  let node = null;\r\n  while (!!stack.length) {\r\n    const sortedStack = [...stack];\r\n    sortNodesByDistance(sortedStack);\r\n    const closestNode = sortedStack.shift();\r\n\r\n    //if closest node in sorted array is infinity, we know that the start node is trapped\r\n    //by walls\r\n    if (closestNode.distance === Infinity) {\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    if (algorithm === 'depthFirstSearch') {\r\n      node = stack.pop();\r\n    } else if (algorithm === 'breadthFirstSearch') {\r\n      node = stack.shift();\r\n    }\r\n\r\n    if (node.isWall) {\r\n      continue;\r\n    }\r\n\r\n    visitedNodesInOrder.push(node);\r\n\r\n    //end node is reached: return all nodes visited in order\r\n    if (node === endNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    const unvisitedNeighbors = getNeighbors(node, grid);\r\n    shuffle(unvisitedNeighbors);\r\n\r\n    //push all unvisited neighbors onto stack, and set link to previous node\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      if (neighbor.isWall) {\r\n        stack.push(neighbor);\r\n      } else if (!neighbor.isVisited && !neighbor.isWall) {\r\n        neighbor.previousNode = node;\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.isVisited = true;\r\n        stack.push(neighbor);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction shuffle(a) {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [a[i], a[j]] = [a[j], a[i]];\r\n  }\r\n  return a;\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n","import React from 'react';\r\nimport {Dropdown, Button, Container, Row, Col} from 'react-bootstrap';\r\nimport './Menu.css';\r\nimport {algorithmSpeed} from '../PathfindingVisualizer/PathfindingVisualizer';\r\n\r\n//descriptions for algorithm\r\nconst AlgorithmDescription = {\r\n  djikstra:\r\n    \"Djikstra's algorithm is a WEIGHTED algorithm and gauruntees the shortest path!\",\r\n  depthFirstSearch:\r\n    'Depth First Search is an UNWEIGHTED algorithm and does not gauruntee the shortest path',\r\n  breadthFirstSearch:\r\n    'Breadth First Search is an UNWEIGHTED algorithm and gauruntees the shortest path',\r\n};\r\n\r\nconst Menu = props => {\r\n  let algorithmSelected = props.algorithmSelected;\r\n  let algorithmDescription = null;\r\n\r\n  if (algorithmSelected === 'djikstra') {\r\n    algorithmDescription = AlgorithmDescription.djikstra;\r\n  } else if (algorithmSelected === 'depthFirstSearch') {\r\n    algorithmDescription = AlgorithmDescription.depthFirstSearch;\r\n  } else if (algorithmSelected === 'breadthFirstSearch') {\r\n    algorithmDescription = AlgorithmDescription.breadthFirstSearch;\r\n  } else if (algorithmSelected === null) {\r\n    algorithmDescription = 'Please choose an algorithm to visualize!';\r\n  }\r\n\r\n  return (\r\n    <div className=\"menu\">\r\n      <img\r\n        src=\"https://images.cooltext.com/5368723.png\"\r\n        width=\"524\"\r\n        height=\"90\"\r\n        alt=\"Graph Visualz\"\r\n        className=\"title\"\r\n      />\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <Dropdown>\r\n              <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\r\n                Choose Graph Algorithm\r\n              </Dropdown.Toggle>\r\n\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={() => props.setAlgorithm('djikstra')}>\r\n                  Djikstra\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() => props.setAlgorithm('depthFirstSearch')}\r\n                >\r\n                  Depth First Search\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() => props.setAlgorithm('breadthFirstSearch')}\r\n                >\r\n                  Breadth First Search\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Col>\r\n          <Col>\r\n            <Dropdown>\r\n              <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\r\n                Generate Maze\r\n              </Dropdown.Toggle>\r\n\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={() => props.generateMaze()}>\r\n                  Recursive Division Algorithm\r\n                </Dropdown.Item>\r\n                <Dropdown.Item>###########</Dropdown.Item>\r\n                <Dropdown.Item>###########</Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              onClick={() => props.resetGrid()}\r\n              disabled={props.algorithmInProgress}\r\n            >\r\n              Reset Grid\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              className=\"button\"\r\n              onClick={() => props.visualizeAlgorithm(props.algorithmSelected)}\r\n              disabled={props.algorithmInProgress}\r\n              variant=\"success\"\r\n            >\r\n              Visualize {props.algorithmSelected}\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Dropdown>\r\n              <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\r\n                Select Wall\r\n              </Dropdown.Toggle>\r\n\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={() => props.setWall('normal')}>\r\n                  Normal\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() => props.setWall('2x')}\r\n                  disabled={!props.algorithmWeighted}\r\n                >\r\n                  Weighted\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Col>\r\n          <Col>\r\n            <Dropdown>\r\n              <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\r\n                Select Speed\r\n              </Dropdown.Toggle>\r\n\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  onClick={() => props.setSpeed(algorithmSpeed.SLOW)}\r\n                >\r\n                  Slow\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() => props.setSpeed(algorithmSpeed.MEDIUM)}\r\n                >\r\n                  Medium\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() => props.setSpeed(algorithmSpeed.FAST)}\r\n                >\r\n                  Fast\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Col>\r\n        </Row>\r\n        <div className=\"algorithmDescription\">\r\n          <strong>{algorithmDescription}</strong>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","let direction = {\r\n  SOUTH: 1,\r\n  EAST: 2,\r\n};\r\n\r\nexport function recursiveDivision(grid) {\r\n  const columns = grid[0].length;\r\n  const rows = grid.length;\r\n  let wallsGeneratedInOrder = [];\r\n  generateOuterWalls(grid, wallsGeneratedInOrder);\r\n  divide(\r\n    grid,\r\n    1,\r\n    1,\r\n    columns,\r\n    rows,\r\n    chooseOrientation(columns, rows),\r\n    wallsGeneratedInOrder\r\n  );\r\n  return wallsGeneratedInOrder;\r\n}\r\n\r\nfunction divide(grid, x, y, columns, rows, orientation, stack) {\r\n  //base case: if width and height are 1\r\n  if (columns < 2 || rows < 2) {\r\n    return;\r\n  }\r\n\r\n  let horizontal = orientation === 'horizontal';\r\n\r\n  //where will walls be drawn from\r\n  let wallX = x + (horizontal ? 0 : Math.floor(Math.random(columns - 2)));\r\n  let wallY = y + (horizontal ? Math.floor(Math.random(rows - 2)) : 0);\r\n\r\n  //where the passage through the wall exist?\r\n  let passageX = wallX + (horizontal ? Math.floor(Math.random(columns)) : 0);\r\n  let passageY = wallY + (horizontal ? 0 : Math.floor(Math.random(rows)));\r\n\r\n  //what direction will the wall be drawn?\r\n  let directionX = horizontal ? 1 : 0;\r\n  let directionY = horizontal ? 0 : 1;\r\n\r\n  //how long will the wall be\r\n  let length = horizontal ? columns : rows;\r\n\r\n  //what direction is perpendicular to the wall?\r\n  let dir = horizontal ? direction.SOUTH : direction.EAST;\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    stack.push(grid[wallX][wallY]);\r\n    wallX += directionX;\r\n    wallY += directionY;\r\n  }\r\n\r\n  let nextX = x;\r\n  let nextY = y;\r\n  let nextColumns = horizontal ? columns : wallX - x + 1;\r\n  let nextRows = horizontal ? wallY - y + 1 : rows;\r\n\r\n  return stack;\r\n}\r\n\r\nfunction generateOuterWalls(grid, stack) {\r\n  const columns = grid[0].length;\r\n  const rows = grid.length;\r\n\r\n  //generate walls for first and last rows\r\n  for (let i = 0; i < columns; i++) {\r\n    stack.push(grid[0][i]);\r\n    stack.push(grid[rows - 1][i]);\r\n  }\r\n\r\n  //generate walls for first and last column\r\n  for (let i = 0; i < rows; i++) {\r\n    stack.push(grid[i][0]);\r\n    stack.push(grid[i][columns - 1]);\r\n  }\r\n}\r\n\r\nfunction chooseOrientation(columns, rows) {\r\n  if (columns < rows) return 'horizontal';\r\n  else if (rows < columns) return 'vertical';\r\n  else return Math.floor(Math.random() + 1) === 0 ? 'horizontal' : 'vertical';\r\n}\r\n","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport {unweightedAlgorithm} from '../algorithms/depthFirstSearch';\r\nimport Menu from '../Menu/Menu';\r\nimport {recursiveDivision} from '../maze/maze';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\n//constants to define start and finish node coordinates\r\nlet START_NODE_ROW = 10;\r\nlet START_NODE_COL = 15;\r\nlet FINISH_NODE_ROW = 10;\r\nlet FINISH_NODE_COL = 30;\r\n\r\n//enumeration to define algorithm animation (in ms)\r\nexport const algorithmSpeed = {\r\n  SLOW: 200,\r\n  MEDIUM: 75,\r\n  FAST: 20,\r\n};\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      startNodeSelected: false,\r\n      finishNodeSelected: false,\r\n      algorithmInProgress: false,\r\n      algorithmSelected: null,\r\n      isAlgorithmSelectedWeighted: null,\r\n      algorithmSpeed: algorithmSpeed.FAST,\r\n      wallTypeSelected: 'normal',\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  };\r\n\r\n  //handles either placing walls, or setting start and finish nodes\r\n  handleMouseDown = (row, col) => {\r\n    let newGrid = [];\r\n    if (this.state.grid[row][col].isStart) {\r\n      this.setState({startNodeSelected: true});\r\n      newGrid = this.state.grid;\r\n    } else if (this.state.grid[row][col].isFinish) {\r\n      this.setState({finishNodeSelected: true});\r\n      newGrid = this.state.grid;\r\n    } else {\r\n      newGrid = getNewGridWithWallToggled(\r\n        this.state.grid,\r\n        row,\r\n        col,\r\n        this.state.wallTypeSelected\r\n      );\r\n    }\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  };\r\n\r\n  handleMouseEnter = (row, col) => {\r\n    if (!this.state.mouseIsPressed) return;\r\n\r\n    let newGrid = [];\r\n    //selecting new start node\r\n    if (this.state.startNodeSelected) {\r\n      newGrid = updateGridWithNewStartNode(this.state.grid, row, col);\r\n    } else if (this.state.finishNodeSelected) {\r\n      newGrid = updateGridWithNewFinishNode(this.state.grid, row, col);\r\n    } else {\r\n      //placing walls\r\n      newGrid = getNewGridWithWallToggled(\r\n        this.state.grid,\r\n        row,\r\n        col,\r\n        this.state.wallTypeSelected\r\n      );\r\n    }\r\n    this.setState({grid: newGrid});\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    if (this.state.startNodeSelected) {\r\n      this.setState({startNodeSelected: false});\r\n    } else if (this.state.finishNodeSelected) {\r\n      this.setState({finishNodeSelected: false});\r\n    }\r\n    this.setState({mouseIsPressed: false});\r\n  };\r\n\r\n  animateAlgorithm = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    this.setState({algorithmInProgress: true});\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, this.state.algorithmSpeed * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        if (!visitedNodesInOrder.isWall) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n        if (node.isStart) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited node-start';\r\n        } else if (node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited node-finish';\r\n        } else if (node.is2xWall) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited node-2x-wall';\r\n        }\r\n      }, this.state.algorithmSpeed * i);\r\n    }\r\n  };\r\n\r\n  animateShortestPath = nodesInShortestPathOrder => {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n\r\n        const previousNode = node.previousNode;\r\n\r\n        let extraClass = '';\r\n        //get direction of previous node\r\n        if (previousNode !== null) {\r\n          if (previousNode.is2xWall === true) extraClass = ' node-2x-wall';\r\n          if (previousNode.row > node.row) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path up';\r\n            document.getElementById(\r\n              `node-${node.row + 1}-${node.col}`\r\n            ).className = 'node node-shortest-path' + extraClass;\r\n          } else if (previousNode.row < node.row) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path down';\r\n            document.getElementById(\r\n              `node-${node.row - 1}-${node.col}`\r\n            ).className = 'node node-shortest-path' + extraClass;\r\n          } else if (previousNode.col > node.col) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path left';\r\n            document.getElementById(\r\n              `node-${node.row}-${node.col + 1}`\r\n            ).className = 'node node-shortest-path' + extraClass;\r\n          } else {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path right';\r\n            document.getElementById(\r\n              `node-${node.row}-${node.col - 1}`\r\n            ).className = 'node node-shortest-path' + extraClass;\r\n          }\r\n        }\r\n      }, 50 * i);\r\n    }\r\n    this.setState({algorithmInProgress: false});\r\n  };\r\n\r\n  visualizeAlgorithmHandler = algorithm => {\r\n    const {grid} = this.state;\r\n    console.log('columns: ', grid[0].length);\r\n    console.log('rows: ', grid.length);\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    let visitedNodesInOrder = [];\r\n\r\n    switch (algorithm) {\r\n      case 'djikstra':\r\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        break;\r\n      case 'depthFirstSearch':\r\n        visitedNodesInOrder = unweightedAlgorithm(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          'depthFirstSearch'\r\n        );\r\n        break;\r\n      case 'breadthFirstSearch':\r\n        visitedNodesInOrder = unweightedAlgorithm(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          'breadthFirstSearch'\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  };\r\n\r\n  resetGridHandler = () => {\r\n    console.log('fdsa');\r\n    const newGrid = getInitialGrid();\r\n    for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n        if (row === START_NODE_ROW && col === START_NODE_COL) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            'node node-start';\r\n        } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            'node node-finish';\r\n        } else {\r\n          document.getElementById(`node-${row}-${col}`).className = 'node';\r\n        }\r\n      }\r\n    }\r\n    this.setState({grid: newGrid});\r\n  };\r\n\r\n  setAlgorithmHandler = algorithm => {\r\n    this.resetGridHandler();\r\n    if (algorithm === 'djikstra') {\r\n      this.setState({\r\n        algorithmSelected: algorithm,\r\n        isAlgorithmSelectedWeighted: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        algorithmSelected: algorithm,\r\n        isAlgorithmSelectedWeighted: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  setSpeedHandler = speed => {\r\n    this.setState({algorithmSpeed: speed});\r\n  };\r\n\r\n  setWallHandler = wall => {\r\n    this.setState({wallTypeSelected: wall});\r\n  };\r\n\r\n  generateMazeHandler = () => {\r\n    const generatedWallsInOrder = recursiveDivision(this.state.grid);\r\n    const newGrid = [...this.state.grid];\r\n    for (let i = 0; i < generatedWallsInOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = generatedWallsInOrder[i];\r\n        newGrid[node.row][node.col].isWall = true;\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-wall';\r\n      }, 15 * i);\r\n    }\r\n    this.setState({grid: newGrid});\r\n  };\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Menu\r\n          setAlgorithm={this.setAlgorithmHandler}\r\n          visualizeAlgorithm={this.visualizeAlgorithmHandler}\r\n          resetGrid={this.resetGridHandler}\r\n          algorithmInProgress={this.state.algorithmInProgress}\r\n          algorithmSelected={this.state.algorithmSelected}\r\n          setSpeed={this.setSpeedHandler}\r\n          algorithmSpeed={this.state.algorithmSpeed}\r\n          setWall={this.setWallHandler}\r\n          algorithmWeighted={this.state.isAlgorithmSelectedWeighted}\r\n          generateMaze={this.generateMazeHandler}\r\n        ></Menu>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall, is2xWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      is2xWall={is2xWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    is2xWall: false,\r\n    previousNode: null,\r\n    animationDirection: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col, wallType) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  let newNode = null;\r\n  if (wallType === 'normal') {\r\n    newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n      is2xWall: false,\r\n    };\r\n  } else if (wallType === '2x') {\r\n    console.log('FDSAFDSAF');\r\n    newNode = {\r\n      ...node,\r\n      isWall: false,\r\n      is2xWall: !node.is2xWall,\r\n    };\r\n  }\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst updateGridWithNewStartNode = (grid, row, col) => {\r\n  const prevStartRow = START_NODE_ROW;\r\n  const prevStartCol = START_NODE_COL;\r\n  const newGrid = grid.slice();\r\n\r\n  //set old start node to normal node\r\n  const oldStartNode = newGrid[prevStartRow][prevStartCol];\r\n  oldStartNode.isStart = false;\r\n\r\n  //set new start node\r\n  const node = newGrid[row][col];\r\n  const newStartNode = {\r\n    ...node,\r\n    isStart: true,\r\n  };\r\n  newGrid[row][col] = newStartNode;\r\n  START_NODE_ROW = row;\r\n  START_NODE_COL = col;\r\n  return newGrid;\r\n};\r\n\r\nconst updateGridWithNewFinishNode = (grid, row, col) => {\r\n  const prevFinishRow = FINISH_NODE_ROW;\r\n  const prevFinishCol = FINISH_NODE_COL;\r\n  const newGrid = grid.slice();\r\n\r\n  //set old finish node to normal node\r\n  const oldStartNode = newGrid[prevFinishRow][prevFinishCol];\r\n  oldStartNode.isFinish = false;\r\n\r\n  //set new finish node\r\n  const node = newGrid[row][col];\r\n  const newFinishNode = {\r\n    ...node,\r\n    isFinish: true,\r\n  };\r\n  newGrid[row][col] = newFinishNode;\r\n  FINISH_NODE_ROW = row;\r\n  FINISH_NODE_COL = col;\r\n  return newGrid;\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}