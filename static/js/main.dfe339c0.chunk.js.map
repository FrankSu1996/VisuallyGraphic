{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/depthFirstSearch.jsx","Menu/Menu.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","isVisited","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","console","log","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","unweightedAlgorithm","endNode","algorithm","stack","sortedStack","pop","getNeighbors","shuffle","a","i","j","Math","floor","random","Menu","src","width","height","alt","Container","Row","Col","Dropdown","Toggle","variant","Item","onClick","setAlgorithm","Button","resetGrid","disabled","algorithmInProgress","visualizeAlgorithm","algorithmSelected","size","setSpeed","algorithmSpeed","SLOW","MEDIUM","FAST","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","componentDidMount","getInitialGrid","setState","handleMouseDown","newGrid","state","startNodeSelected","finishNodeSelected","getNewGridWithWallToggled","mouseIsPressed","handleMouseEnter","updateGridWithNewStartNode","updateGridWithNewFinishNode","handleMouseUp","animateAlgorithm","nodesInShortestPathOrder","setTimeout","animateShortestPath","document","getElementById","visualizeAlgorithmHandler","currentNode","unshift","getNodesInShortestPathOrder","resetGridHandler","setAlgorithmHandler","setSpeedHandler","speed","Fragment","map","rowIdx","key","nodeIdx","currentRow","createNode","animationDirection","slice","newNode","prevStartRow","prevStartCol","newStartNode","prevFinishRow","prevFinishCol","newFinishNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4VAIqBA,G,uLACT,IAAD,EAUHC,KAAKC,MARPC,EAFK,EAELA,IACAC,EAHK,EAGLA,SACAC,EAJK,EAILA,QACAC,EALK,EAKLA,OACAC,EANK,EAMLA,YACAC,EAPK,EAOLA,aACAC,EARK,EAQLA,UACAC,EATK,EASLA,IAEIC,EAAiBP,EACnB,cACAC,EACA,aACAC,EACA,YACA,GAEJ,OACE,yBACEM,GAAE,eAAUF,EAAV,YAAiBP,GACnBU,UAAS,eAAUF,GACnBJ,YAAa,kBAAMA,EAAYG,EAAKP,IACpCK,aAAc,kBAAMA,EAAaE,EAAKP,IACtCM,UAAW,kBAAMA,W,GA1BSK,cCA3B,SAASC,EAAUC,EAAMC,EAAWC,GACzC,IAAMC,EAAsB,GAC5BF,EAAUG,SAAW,EACrBH,EAAUI,WAAY,EAEtB,IADA,IAAMC,EAuCR,SAAsBN,GACpB,IAAMO,EAAQ,GADY,uBAE1B,YAAkBP,EAAlB,+CAAwB,CAAC,IAAdN,EAAa,+BACtB,YAAmBA,EAAnB,+CAAwB,CAAC,IAAdc,EAAa,QACtBD,EAAME,KAAMD,IAFQ,oFAFE,kFAO1B,OAAOD,EA9CgBG,CAAaV,GAC3BM,EAAeK,QAAQ,CAC9BC,EAAqBN,GACrB,IAAMO,EAAcP,EAAeQ,QAEnC,IAAID,EAAYvB,OAAhB,CAGA,GAAIuB,EAAYT,WAAaW,IAAU,OAAOZ,EAI9C,GAHAU,EAAYR,WAAY,EACxBF,EAAoBM,KAAMI,GAC1BG,QAAQC,IAAKd,EAAoBQ,QAC7BE,IAAgBX,EAAY,OAAOC,EACvCe,EAA0BL,EAAab,KAI3C,SAASY,EAAqBN,GAC5BA,EAAea,MAAM,SAACC,EAAOC,GAAR,OAAkBD,EAAMhB,SAAWiB,EAAMjB,YAGhE,SAASc,EAA0BV,EAAMR,GACvC,IAAMsB,EAOR,SAAgCd,EAAMR,GACpC,IAAMuB,EAAY,GACXpC,EAAYqB,EAAZrB,IAAKO,EAAOc,EAAPd,IACRA,EAAM,GAAG6B,EAAUd,KAAMT,EAAKN,EAAM,GAAGP,IACvCO,EAAMM,EAAKW,OAAS,GAAGY,EAAUd,KAAMT,EAAKN,EAAM,GAAGP,IACrDA,EAAM,GAAGoC,EAAUd,KAAMT,EAAKN,GAAKP,EAAM,IACzCA,EAAMa,EAAK,GAAGW,OAAS,GAAGY,EAAUd,KAAMT,EAAKN,GAAKP,EAAM,IAC9D,OAAOoC,EAAUC,QAAQ,SAAAC,GAAQ,OAAKA,EAASpB,aAdpBqB,CAAuBlB,EAAMR,GADX,uBAE7C,YAAuBsB,EAAvB,+CAA2C,CAAC,IAAjCG,EAAgC,QACzCA,EAASrB,SAAWI,EAAKJ,SAAW,EACpCqB,EAASE,aAAenB,GAJmB,mFCxBxC,SAASoB,EAAoB5B,EAAMC,EAAW4B,EAASC,GAC5D,IAAM3B,EAAsB,GACtB4B,EAAQ,GACd9B,EAAUI,WAAY,EACtB0B,EAAMtB,KAAKR,GACXA,EAAUG,SAAW,EAErB,IADA,IAAII,EAAO,KACFuB,EAAMpB,QAAQ,CACrB,IAAMqB,EAAW,UAAOD,GAMxB,GALoBC,EA8DPb,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMhB,SAAWiB,EAAMjB,YA7DvC4B,EAAYlB,QAIhBV,WAAaW,IAC3B,OAAOZ,EAST,GANkB,qBAAd2B,EACFtB,EAAOuB,EAAME,MACU,uBAAdH,IACTtB,EAAOuB,EAAMjB,UAGXN,EAAKlB,OAAT,CAOA,GAHAa,EAAoBM,KAAKD,GAGrBA,IAASqB,EACX,OAAO1B,EAGT,IAAMmB,EAAqBY,EAAa1B,EAAMR,GAC9CmC,EAAQb,GA7Ba,2BAgCrB,YAAuBA,EAAvB,+CAA2C,CAAC,IAAjCG,EAAgC,QACrCA,EAASnC,OACXyC,EAAMtB,KAAKgB,GACDA,EAASpB,WAAcoB,EAASnC,SAC1CmC,EAASE,aAAenB,EACxBiB,EAASrB,SAAWI,EAAKJ,SAAW,EACpCqB,EAASpB,WAAY,EACrB0B,EAAMtB,KAAKgB,KAvCM,qFA6CzB,SAASS,EAAa1B,EAAMR,GAC1B,IAAMuB,EAAY,GACXpC,EAAYqB,EAAZrB,IAAKO,EAAOc,EAAPd,IAKZ,OAJIA,EAAM,GAAG6B,EAAUd,KAAKT,EAAKN,EAAM,GAAGP,IACtCO,EAAMM,EAAKW,OAAS,GAAGY,EAAUd,KAAKT,EAAKN,EAAM,GAAGP,IACpDA,EAAM,GAAGoC,EAAUd,KAAKT,EAAKN,GAAKP,EAAM,IACxCA,EAAMa,EAAK,GAAGW,OAAS,GAAGY,EAAUd,KAAKT,EAAKN,GAAKP,EAAM,IACtDoC,EAAUC,QAAO,SAAAC,GAAQ,OAAKA,EAASpB,aAGhD,SAAS8B,EAAQC,GACf,IAAK,IAAIC,EAAID,EAAEzB,OAAS,EAAG0B,EAAI,EAAGA,IAAK,CACrC,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADL,EAEtB,CAACD,EAAEE,GAAIF,EAAEC,IAAvBD,EAAEC,GAFkC,KAE9BD,EAAEE,GAF4B,KAIvC,OAAOF,E,4CC+BMM,G,MAlGF,SAAAxD,GACX,OACE,yBAAKW,UAAU,QACb,yBACE8C,IAAI,0CACJC,MAAM,MACNC,OAAO,KACPC,IAAI,gBACJjD,UAAU,UAEZ,kBAACkD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAUxD,GAAG,kBAAtC,oBAIA,kBAACsD,EAAA,EAASR,KAAV,KACE,kBAACQ,EAAA,EAASG,KAAV,CAAeC,QAAS,kBAAMpE,EAAMqE,aAAa,cAAjD,YAGA,kBAACL,EAAA,EAASG,KAAV,CACEC,QAAS,kBAAMpE,EAAMqE,aAAa,sBADpC,sBAKA,kBAACL,EAAA,EAASG,KAAV,CACEC,QAAS,kBAAMpE,EAAMqE,aAAa,wBADpC,2BAQN,kBAACN,EAAA,EAAD,KACE,kBAACO,EAAA,EAAD,CACEF,QAAS,kBAAMpE,EAAMuE,aACrBC,SAAUxE,EAAMyE,qBAFlB,eAOF,kBAACV,EAAA,EAAD,KACE,kBAACO,EAAA,EAAD,CACE3D,UAAU,SACVyD,QAAS,kBAAMpE,EAAM0E,mBAAmB1E,EAAM2E,oBAC9CH,SAAUxE,EAAMyE,oBAChBP,QAAQ,UACRU,KAAK,MALP,aAOa5E,EAAM2E,oBAGrB,kBAACZ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAUxD,GAAG,kBAAtC,eAIA,kBAACsD,EAAA,EAASR,KAAV,KACE,kBAACQ,EAAA,EAASG,KAAV,eACA,kBAACH,EAAA,EAASG,KAAV,oBACA,kBAACH,EAAA,EAASG,KAAV,uBAIN,kBAACJ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAUxD,GAAG,kBAAtC,gBAIA,kBAACsD,EAAA,EAASR,KAAV,KACE,kBAACQ,EAAA,EAASG,KAAV,CACEC,QAAS,kBAAMpE,EAAM6E,SAASC,EAAeC,QAD/C,QAKA,kBAACf,EAAA,EAASG,KAAV,CACEC,QAAS,kBAAMpE,EAAM6E,SAASC,EAAeE,UAD/C,UAKA,kBAAChB,EAAA,EAASG,KAAV,CACEC,QAAS,kBAAMpE,EAAM6E,SAASC,EAAeG,QAD/C,gBChFZC,G,MAAiB,IACjBC,EAAiB,GACjBC,EAAkB,GAClBC,EAAkB,GAGTP,EAAiB,CAC5BC,KAAM,IACNC,OAAQ,GACRC,KAAM,IAGaK,E,YACnB,aAAe,IAAD,8BACZ,+CAYFC,kBAAoB,WAClB,IAAMzE,EAAO0E,IACb,EAAKC,SAAS,CAAC3E,UAfH,EAmBd4E,gBAAkB,SAAClF,EAAKP,GACtB,IAAI0F,EAAU,GACV,EAAKC,MAAM9E,KAAKN,GAAKP,GAAKE,SAC5B,EAAKsF,SAAS,CAACI,mBAAmB,IAClCF,EAAU,EAAKC,MAAM9E,MACZ,EAAK8E,MAAM9E,KAAKN,GAAKP,GAAKC,UACnC,EAAKuF,SAAS,CAACK,oBAAoB,IACnCH,EAAU,EAAKC,MAAM9E,MAErB6E,EAAUI,EAA0B,EAAKH,MAAM9E,KAAMN,EAAKP,GAE5D,EAAKwF,SAAS,CAAC3E,KAAM6E,EAASK,gBAAgB,KA9BlC,EAiCdC,iBAAmB,SAACzF,EAAKP,GACvB,GAAK,EAAK2F,MAAMI,eAAhB,CAEA,IAAIL,EAAU,GAGZA,EADE,EAAKC,MAAMC,kBACHK,EAA2B,EAAKN,MAAM9E,KAAMN,EAAKP,GAClD,EAAK2F,MAAME,mBACVK,EAA4B,EAAKP,MAAM9E,KAAMN,EAAKP,GAGlD8F,EAA0B,EAAKH,MAAM9E,KAAMN,EAAKP,GAE5D,EAAKwF,SAAS,CAAC3E,KAAM6E,MA9CT,EAiDdS,cAAgB,WACV,EAAKR,MAAMC,kBACb,EAAKJ,SAAS,CAACI,mBAAmB,IACzB,EAAKD,MAAME,oBACpB,EAAKL,SAAS,CAACK,oBAAoB,IAErC,EAAKL,SAAS,CAACO,gBAAgB,KAvDnB,EA0DdK,iBAAmB,SAACpF,EAAqBqF,GACvC,EAAKb,SAAS,CAAChB,qBAAqB,IACpC,IAFoE,eAE3DtB,GACP,GAAIA,IAAMlC,EAAoBQ,OAI5B,OAHA8E,YAAW,WACT,EAAKC,oBAAoBF,KACxB,GAAKnD,GACF,CAAN,UAEFoD,YAAW,WACT,IAAMjF,EAAOL,EAAoBkC,GAC5BlC,EAAoBb,SACvBqG,SAASC,eAAT,eAAgCpF,EAAKd,IAArC,YAA4Cc,EAAKrB,MAAOU,UACtD,qBAEAW,EAAKnB,UACPsG,SAASC,eAAT,eAAgCpF,EAAKd,IAArC,YAA4Cc,EAAKrB,MAAOU,UACtD,kCAEH,EAAKiF,MAAMd,eAAiB3B,IAjBxBA,EAAI,EAAGA,GAAKlC,EAAoBQ,OAAQ0B,IAAK,CAAC,IAAD,IAA7CA,GAA6C,oCA5D1C,EAiFdqD,oBAAsB,SAAAF,GACpB,IADiD,IAAD,WACvCnD,GACPoD,YAAW,WACT,IAAMjF,EAAOgF,EAAyBnD,GAEhCV,EAAenB,EAAKmB,aAGL,OAAjBA,IACEA,EAAajC,IAAMc,EAAKd,KAC1BiG,SAASC,eAAT,eAAgCpF,EAAKd,IAArC,YAA4Cc,EAAKrB,MAAOU,UACtD,6BACF8F,SAASC,eAAT,eACUpF,EAAKd,IAAM,EADrB,YAC0Bc,EAAKrB,MAC7BU,UAAY,2BACL8B,EAAajC,IAAMc,EAAKd,KACjCiG,SAASC,eAAT,eAAgCpF,EAAKd,IAArC,YAA4Cc,EAAKrB,MAAOU,UACtD,+BACF8F,SAASC,eAAT,eACUpF,EAAKd,IAAM,EADrB,YAC0Bc,EAAKrB,MAC7BU,UAAY,2BACL8B,EAAaxC,IAAMqB,EAAKrB,KACjCwG,SAASC,eAAT,eAAgCpF,EAAKd,IAArC,YAA4Cc,EAAKrB,MAAOU,UACtD,+BACF8F,SAASC,eAAT,eACUpF,EAAKd,IADf,YACsBc,EAAKrB,IAAM,IAC/BU,UAAY,4BAEd8F,SAASC,eAAT,eAAgCpF,EAAKd,IAArC,YAA4Cc,EAAKrB,MAAOU,UACtD,gCACF8F,SAASC,eAAT,eACUpF,EAAKd,IADf,YACsBc,EAAKrB,IAAM,IAC/BU,UAAY,8BAGjB,GAAKwC,IAlCDA,EAAI,EAAGA,EAAImD,EAAyB7E,OAAQ0B,IAAM,EAAlDA,GAoCT,EAAKsC,SAAS,CAAChB,qBAAqB,KAtHxB,EAyHdkC,0BAA4B,SAAA/D,GAAc,IACjC9B,EAAQ,EAAK8E,MAAb9E,KACDC,EAAYD,EAAKoE,GAAgBC,GACjCnE,EAAaF,EAAKsE,GAAiBC,GACrCpE,EAAsB,GAE1B,OAAQ2B,GACN,IAAK,WACH3B,EAAsBJ,EAASC,EAAMC,EAAWC,GAChD,MACF,IAAK,mBACHC,EAAsByB,EACpB5B,EACAC,EACAC,EACA,oBAEF,MACF,IAAK,qBACHC,EAAsByB,EACpB5B,EACAC,EACAC,EACA,sBAMN,IAAMsF,EHjHH,SAAsCtF,GAG3C,IAFA,IAAMsF,EAA2B,GAC7BM,EAAc5F,EACK,OAAhB4F,GACLN,EAAyBO,QAASD,GAClCA,EAAcA,EAAYnE,aAE5B,OAAO6D,EG0G4BQ,CAA4B9F,GAC7D,EAAKqF,iBAAiBpF,EAAqBqF,IAvJ/B,EA0JdS,iBAAmB,WACjBjF,QAAQC,IAAI,QAEZ,IADA,IAAM4D,EAAUH,IACPhF,EAAM,EAAGA,EAAM,GAAIA,IAC1B,IAAK,IAAIP,EAAM,EAAGA,EAAM,GAAIA,IAExBwG,SAASC,eAAT,eAAgClG,EAAhC,YAAuCP,IAAOU,UAD5CH,IAAQ0E,GAAkBjF,IAAQkF,EAElC,kBACO3E,IAAQ4E,GAAmBnF,IAAQoF,EAE1C,mBAEwD,OAIhE,EAAKI,SAAS,CAAC3E,KAAM6E,KA1KT,EA6KdqB,oBAAsB,SAAApE,GACpB,EAAK6C,SAAS,CAACd,kBAAmB/B,KA9KtB,EAiLdqE,gBAAkB,SAAAC,GAChB,EAAKzB,SAAS,CAACX,eAAgBoC,KAhL/B,EAAKtB,MAAQ,CACX9E,KAAM,GACNkF,gBAAgB,EAChBH,mBAAmB,EACnBC,oBAAoB,EACpBrB,qBAAqB,EACrBE,kBAAmB,KACnBG,eAAgBA,EAAeG,MATrB,E,sEAqLJ,IAAD,SACwBlF,KAAK6F,MAA7B9E,EADA,EACAA,KAAMkF,EADN,EACMA,eAEb,OACE,kBAAC,IAAMmB,SAAP,KACE,kBAAC,EAAD,CACE9C,aAActE,KAAKiH,oBACnBtC,mBAAoB3E,KAAK4G,0BACzBpC,UAAWxE,KAAKgH,iBAChBtC,oBAAqB1E,KAAK6F,MAAMnB,oBAChCE,kBAAmB5E,KAAK6F,MAAMjB,kBAC9BE,SAAU9E,KAAKkH,gBACfnC,eAAgB/E,KAAK6F,MAAMd,iBAE7B,yBAAKnE,UAAU,QACZG,EAAKsG,KAAI,SAAC5G,EAAK6G,GACd,OACE,yBAAKC,IAAKD,GACP7G,EAAI4G,KAAI,SAAC9F,EAAMiG,GAAa,IACpB/G,EAAuCc,EAAvCd,IAAKP,EAAkCqB,EAAlCrB,IAAKC,EAA6BoB,EAA7BpB,SAAUC,EAAmBmB,EAAnBnB,QAASC,EAAUkB,EAAVlB,OACpC,OACE,kBAAC,EAAD,CACEkH,IAAKC,EACLtH,IAAKA,EACLC,SAAUA,EACVC,QAASA,EACTC,OAAQA,EACR4F,eAAgBA,EAChB3F,YAAa,SAACG,EAAKP,GAAN,OAAc,EAAKyF,gBAAgBlF,EAAKP,IACrDK,aAAc,SAACE,EAAKP,GAAN,OACZ,EAAKgG,iBAAiBzF,EAAKP,IAE7BM,UAAW,kBAAM,EAAK6F,iBACtB5F,IAAKA,iB,GAvNwBI,aAoO7C4E,EAAiB,WAErB,IADA,IAAM1E,EAAO,GACJN,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAEjC,IADA,IAAMgH,EAAa,GACVvH,EAAM,EAAGA,EAAM,GAAIA,IAC1BuH,EAAWjG,KAAKkG,EAAWxH,EAAKO,IAElCM,EAAKS,KAAKiG,GAEZ,OAAO1G,GAGH2G,EAAa,SAACxH,EAAKO,GACvB,MAAO,CACLP,MACAO,MACAL,QAASK,IAAQ0E,GAAkBjF,IAAQkF,EAC3CjF,SAAUM,IAAQ4E,GAAmBnF,IAAQoF,EAC7CnE,SAAUW,IACVV,WAAW,EACXf,QAAQ,EACRqC,aAAc,KACdiF,mBAAoB,OAIlB3B,EAA4B,SAACjF,EAAMN,EAAKP,GAC5C,IAAM0F,EAAU7E,EAAK6G,QACfrG,EAAOqE,EAAQnF,GAAKP,GACpB2H,EAAO,eACRtG,EADQ,CAEXlB,QAASkB,EAAKlB,SAGhB,OADAuF,EAAQnF,GAAKP,GAAO2H,EACbjC,GAGHO,EAA6B,SAACpF,EAAMN,EAAKP,GAC7C,IAAM4H,EAAe3C,EACf4C,EAAe3C,EACfQ,EAAU7E,EAAK6G,QAGAhC,EAAQkC,GAAcC,GAC9B3H,SAAU,EAGvB,IAAMmB,EAAOqE,EAAQnF,GAAKP,GACpB8H,EAAY,eACbzG,EADa,CAEhBnB,SAAS,IAKX,OAHAwF,EAAQnF,GAAKP,GAAO8H,EACpB7C,EAAiB1E,EACjB2E,EAAiBlF,EACV0F,GAGHQ,EAA8B,SAACrF,EAAMN,EAAKP,GAC9C,IAAM+H,EAAgB5C,EAChB6C,EAAgB5C,EAChBM,EAAU7E,EAAK6G,QAGAhC,EAAQqC,GAAeC,GAC/B/H,UAAW,EAGxB,IAAMoB,EAAOqE,EAAQnF,GAAKP,GACpBiI,EAAa,eACd5G,EADc,CAEjBpB,UAAU,IAKZ,OAHAyF,EAAQnF,GAAKP,GAAOiI,EACpB9C,EAAkB5E,EAClB6E,EAAkBpF,EACX0F,G,MCxTMwC,MARf,WACE,OACE,yBAAKxH,UAAU,OACb,kBAAC,EAAD,QCIcyH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjC,SAASC,eAAe,SD2H3C,kBAAmBiC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dfe339c0.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra (grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  startNode.isVisited = true;\r\n  const unvisitedNodes = getAllNodes (grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance (unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift ();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push (closestNode);\r\n    console.log (visitedNodesInOrder.length);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors (closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance (unvisitedNodes) {\r\n  unvisitedNodes.sort ((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors (node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors (node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors (node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push (grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push (grid[row + 1][col]);\r\n  if (col > 0) neighbors.push (grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push (grid[row][col + 1]);\r\n  return neighbors.filter (neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes (grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push (node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder (finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift (currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// Performs either weightedAlgorithm or Breadth First Search algorithm;\r\n// returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function unweightedAlgorithm(grid, startNode, endNode, algorithm) {\r\n  const visitedNodesInOrder = [];\r\n  const stack = [];\r\n  startNode.isVisited = true;\r\n  stack.push(startNode);\r\n  startNode.distance = 0;\r\n  let node = null;\r\n  while (!!stack.length) {\r\n    const sortedStack = [...stack];\r\n    sortNodesByDistance(sortedStack);\r\n    const closestNode = sortedStack.shift();\r\n\r\n    //if closest node in sorted array is infinity, we know that the start node is trapped\r\n    //by walls\r\n    if (closestNode.distance === Infinity) {\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    if (algorithm === 'depthFirstSearch') {\r\n      node = stack.pop();\r\n    } else if (algorithm === 'breadthFirstSearch') {\r\n      node = stack.shift();\r\n    }\r\n\r\n    if (node.isWall) {\r\n      continue;\r\n    }\r\n\r\n    visitedNodesInOrder.push(node);\r\n\r\n    //end node is reached: return all nodes visited in order\r\n    if (node === endNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    const unvisitedNeighbors = getNeighbors(node, grid);\r\n    shuffle(unvisitedNeighbors);\r\n\r\n    //push all unvisited neighbors onto stack, and set link to previous node\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      if (neighbor.isWall) {\r\n        stack.push(neighbor);\r\n      } else if (!neighbor.isVisited && !neighbor.isWall) {\r\n        neighbor.previousNode = node;\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.isVisited = true;\r\n        stack.push(neighbor);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction shuffle(a) {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [a[i], a[j]] = [a[j], a[i]];\r\n  }\r\n  return a;\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n","import React from 'react';\r\nimport {Dropdown, Button, Container, Row, Col} from 'react-bootstrap';\r\nimport './Menu.css';\r\nimport {algorithmSpeed} from '../PathfindingVisualizer/PathfindingVisualizer';\r\n\r\nconst Menu = props => {\r\n  return (\r\n    <div className=\"menu\">\r\n      <img\r\n        src=\"https://images.cooltext.com/5368723.png\"\r\n        width=\"524\"\r\n        height=\"90\"\r\n        alt=\"Graph Visualz\"\r\n        className=\"title\"\r\n      />\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <Dropdown>\r\n              <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\r\n                Choose Algorithm\r\n              </Dropdown.Toggle>\r\n\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={() => props.setAlgorithm('djikstra')}>\r\n                  Djikstra\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() => props.setAlgorithm('depthFirstSearch')}\r\n                >\r\n                  Depth First Search\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() => props.setAlgorithm('breadthFirstSearch')}\r\n                >\r\n                  Breadth First Search\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              onClick={() => props.resetGrid()}\r\n              disabled={props.algorithmInProgress}\r\n            >\r\n              Reset Grid\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              className=\"button\"\r\n              onClick={() => props.visualizeAlgorithm(props.algorithmSelected)}\r\n              disabled={props.algorithmInProgress}\r\n              variant=\"success\"\r\n              size=\"lg\"\r\n            >\r\n              Visualize {props.algorithmSelected}\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Dropdown>\r\n              <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\r\n                Select Wall\r\n              </Dropdown.Toggle>\r\n\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item>Normal</Dropdown.Item>\r\n                <Dropdown.Item>2x Weighted</Dropdown.Item>\r\n                <Dropdown.Item>3x Weighted</Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Col>\r\n          <Col>\r\n            <Dropdown>\r\n              <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\r\n                Select Speed\r\n              </Dropdown.Toggle>\r\n\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  onClick={() => props.setSpeed(algorithmSpeed.SLOW)}\r\n                >\r\n                  Slow\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() => props.setSpeed(algorithmSpeed.MEDIUM)}\r\n                >\r\n                  Medium\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() => props.setSpeed(algorithmSpeed.FAST)}\r\n                >\r\n                  Fast\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport {unweightedAlgorithm} from '../algorithms/depthFirstSearch';\r\nimport Menu from '../Menu/Menu';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\n//constants to define start and finish node coordinates\r\nlet START_NODE_ROW = 10;\r\nlet START_NODE_COL = 15;\r\nlet FINISH_NODE_ROW = 10;\r\nlet FINISH_NODE_COL = 30;\r\n\r\n//enumeration to define algorithm animation (in ms)\r\nexport const algorithmSpeed = {\r\n  SLOW: 200,\r\n  MEDIUM: 75,\r\n  FAST: 20,\r\n};\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      startNodeSelected: false,\r\n      finishNodeSelected: false,\r\n      algorithmInProgress: false,\r\n      algorithmSelected: null,\r\n      algorithmSpeed: algorithmSpeed.FAST,\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  };\r\n\r\n  //handles either placing walls, or setting start and finish nodes\r\n  handleMouseDown = (row, col) => {\r\n    let newGrid = [];\r\n    if (this.state.grid[row][col].isStart) {\r\n      this.setState({startNodeSelected: true});\r\n      newGrid = this.state.grid;\r\n    } else if (this.state.grid[row][col].isFinish) {\r\n      this.setState({finishNodeSelected: true});\r\n      newGrid = this.state.grid;\r\n    } else {\r\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    }\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  };\r\n\r\n  handleMouseEnter = (row, col) => {\r\n    if (!this.state.mouseIsPressed) return;\r\n\r\n    let newGrid = [];\r\n    //selecting new start node\r\n    if (this.state.startNodeSelected) {\r\n      newGrid = updateGridWithNewStartNode(this.state.grid, row, col);\r\n    } else if (this.state.finishNodeSelected) {\r\n      newGrid = updateGridWithNewFinishNode(this.state.grid, row, col);\r\n    } else {\r\n      //placing walls\r\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    }\r\n    this.setState({grid: newGrid});\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    if (this.state.startNodeSelected) {\r\n      this.setState({startNodeSelected: false});\r\n    } else if (this.state.finishNodeSelected) {\r\n      this.setState({finishNodeSelected: false});\r\n    }\r\n    this.setState({mouseIsPressed: false});\r\n  };\r\n\r\n  animateAlgorithm = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    this.setState({algorithmInProgress: true});\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 20 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        if (!visitedNodesInOrder.isWall) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n        if (node.isStart) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited node-start';\r\n        }\r\n      }, this.state.algorithmSpeed * i);\r\n    }\r\n  };\r\n\r\n  animateShortestPath = nodesInShortestPathOrder => {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n\r\n        const previousNode = node.previousNode;\r\n\r\n        //get direction of previous node\r\n        if (previousNode !== null) {\r\n          if (previousNode.row > node.row) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path up';\r\n            document.getElementById(\r\n              `node-${node.row + 1}-${node.col}`\r\n            ).className = 'node node-shortest-path';\r\n          } else if (previousNode.row < node.row) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path down';\r\n            document.getElementById(\r\n              `node-${node.row - 1}-${node.col}`\r\n            ).className = 'node node-shortest-path';\r\n          } else if (previousNode.col > node.col) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path left';\r\n            document.getElementById(\r\n              `node-${node.row}-${node.col + 1}`\r\n            ).className = 'node node-shortest-path';\r\n          } else {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path right';\r\n            document.getElementById(\r\n              `node-${node.row}-${node.col - 1}`\r\n            ).className = 'node node-shortest-path';\r\n          }\r\n        }\r\n      }, 50 * i);\r\n    }\r\n    this.setState({algorithmInProgress: false});\r\n  };\r\n\r\n  visualizeAlgorithmHandler = algorithm => {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    let visitedNodesInOrder = [];\r\n\r\n    switch (algorithm) {\r\n      case 'djikstra':\r\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        break;\r\n      case 'depthFirstSearch':\r\n        visitedNodesInOrder = unweightedAlgorithm(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          'depthFirstSearch'\r\n        );\r\n        break;\r\n      case 'breadthFirstSearch':\r\n        visitedNodesInOrder = unweightedAlgorithm(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          'breadthFirstSearch'\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  };\r\n\r\n  resetGridHandler = () => {\r\n    console.log('fdsa');\r\n    const newGrid = getInitialGrid();\r\n    for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n        if (row === START_NODE_ROW && col === START_NODE_COL) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            'node node-start';\r\n        } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            'node node-finish';\r\n        } else {\r\n          document.getElementById(`node-${row}-${col}`).className = 'node';\r\n        }\r\n      }\r\n    }\r\n    this.setState({grid: newGrid});\r\n  };\r\n\r\n  setAlgorithmHandler = algorithm => {\r\n    this.setState({algorithmSelected: algorithm});\r\n  };\r\n\r\n  setSpeedHandler = speed => {\r\n    this.setState({algorithmSpeed: speed});\r\n  };\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Menu\r\n          setAlgorithm={this.setAlgorithmHandler}\r\n          visualizeAlgorithm={this.visualizeAlgorithmHandler}\r\n          resetGrid={this.resetGridHandler}\r\n          algorithmInProgress={this.state.algorithmInProgress}\r\n          algorithmSelected={this.state.algorithmSelected}\r\n          setSpeed={this.setSpeedHandler}\r\n          algorithmSpeed={this.state.algorithmSpeed}\r\n        ></Menu>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n    animationDirection: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst updateGridWithNewStartNode = (grid, row, col) => {\r\n  const prevStartRow = START_NODE_ROW;\r\n  const prevStartCol = START_NODE_COL;\r\n  const newGrid = grid.slice();\r\n\r\n  //set old start node to normal node\r\n  const oldStartNode = newGrid[prevStartRow][prevStartCol];\r\n  oldStartNode.isStart = false;\r\n\r\n  //set new start node\r\n  const node = newGrid[row][col];\r\n  const newStartNode = {\r\n    ...node,\r\n    isStart: true,\r\n  };\r\n  newGrid[row][col] = newStartNode;\r\n  START_NODE_ROW = row;\r\n  START_NODE_COL = col;\r\n  return newGrid;\r\n};\r\n\r\nconst updateGridWithNewFinishNode = (grid, row, col) => {\r\n  const prevFinishRow = FINISH_NODE_ROW;\r\n  const prevFinishCol = FINISH_NODE_COL;\r\n  const newGrid = grid.slice();\r\n\r\n  //set old finish node to normal node\r\n  const oldStartNode = newGrid[prevFinishRow][prevFinishCol];\r\n  oldStartNode.isFinish = false;\r\n\r\n  //set new finish node\r\n  const node = newGrid[row][col];\r\n  const newFinishNode = {\r\n    ...node,\r\n    isFinish: true,\r\n  };\r\n  newGrid[row][col] = newFinishNode;\r\n  FINISH_NODE_ROW = row;\r\n  FINISH_NODE_COL = col;\r\n  return newGrid;\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}