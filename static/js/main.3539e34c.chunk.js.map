{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/depthFirstSearch.jsx","Menu/Legend/Legend.jsx","Menu/Menu.jsx","maze/maze.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","is2xWall","onMouseDown","onMouseEnter","onMouseUp","row","isVisited","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","unweightedAlgorithm","endNode","algorithm","stack","sortedStack","pop","getNeighbors","shuffle","a","i","j","Math","floor","random","Legend","Container","Row","Col","AlgorithmDescription","Menu","algorithmSelected","algorithmDescription","Fragment","src","width","height","alt","Dropdown","Toggle","variant","Item","onClick","setAlgorithm","generateMaze","Button","resetGrid","disabled","algorithmInProgress","visualizeAlgorithm","setWall","algorithmWeighted","setSpeed","algorithmSpeed","SLOW","MEDIUM","FAST","direction","SOUTH","EAST","recursiveDivision","columns","rows","wallsGeneratedInOrder","generateOuterWalls","x","y","orientation","horizontal","wallX","wallY","directionX","directionY","divide","chooseOrientation","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","componentDidMount","getInitialGrid","setState","handleMouseDown","newGrid","state","startNodeSelected","finishNodeSelected","getNewGridWithWallToggled","wallTypeSelected","mouseIsPressed","handleMouseEnter","updateGridWithNewStartNode","updateGridWithNewFinishNode","handleMouseUp","animateAlgorithm","nodesInShortestPathOrder","setTimeout","animateShortestPath","document","getElementById","extraClass","visualizeAlgorithmHandler","console","log","currentNode","unshift","getNodesInShortestPathOrder","resetGridHandler","setAlgorithmHandler","isAlgorithmSelectedWeighted","setSpeedHandler","speed","setWallHandler","wall","generateMazeHandler","generatedWallsInOrder","map","rowIdx","key","nodeIdx","currentRow","createNode","animationDirection","wallType","slice","newNode","prevStartRow","prevStartCol","newStartNode","prevFinishRow","prevFinishCol","newFinishNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oWAIqBA,G,uLACT,IAAD,EAYHC,KAAKC,MAVPC,EAFK,EAELA,IACAC,EAHK,EAGLA,SACAC,EAJK,EAILA,QACAC,EALK,EAKLA,OACAC,EANK,EAMLA,SACAC,EAPK,EAOLA,YACAC,EARK,EAQLA,aACAC,EATK,EASLA,UACAC,EAVK,EAULA,IACAC,EAXK,EAWLA,UAEIC,EAAiBT,EACnB,cACAC,EACA,aACAC,EACA,YACAC,EACA,eACAK,EACA,eACA,GAEJ,OACE,yBACEE,GAAE,eAAUH,EAAV,YAAiBR,GACnBY,UAAS,eAAUF,GACnBL,YAAa,kBAAMA,EAAYG,EAAKR,IACpCM,aAAc,kBAAMA,EAAaE,EAAKR,IACtCO,UAAW,kBAAMA,W,GAhCSM,cCA3B,SAASC,EAASC,EAAMC,EAAWC,GACxC,IAAMC,EAAsB,GAC5BF,EAAUG,SAAW,EACrBH,EAAUP,WAAY,EAEtB,IADA,IAAMW,EA0CR,SAAqBL,GACnB,IAAMM,EAAQ,GADW,uBAEzB,YAAkBN,EAAlB,+CAAwB,CAAC,IAAdP,EAAa,+BACtB,YAAmBA,EAAnB,+CAAwB,CAAC,IAAdc,EAAa,QACtBD,EAAME,KAAKD,IAFS,oFAFC,kFAOzB,OAAOD,EAjDgBG,CAAYT,GAC1BK,EAAeK,QAAQ,CAC9BC,EAAoBN,GACpB,IAAMO,EAAcP,EAAeQ,QAEnC,IAAID,EAAYxB,OAAhB,CAGA,GAAIwB,EAAYR,WAAaU,IAAU,OAAOX,EAG9C,GAFAS,EAAYlB,WAAY,EACxBS,EAAoBK,KAAKI,GACrBA,IAAgBV,EAAY,OAAOC,EACvCY,EAAyBH,EAAaZ,KAI1C,SAASW,EAAoBN,GAC3BA,EAAeW,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMb,SAAWc,EAAMd,YAG/D,SAASW,EAAyBR,EAAMP,GACtC,IAAMmB,EAWR,SAA+BZ,EAAMP,GACnC,IAAMoB,EAAY,GACXnC,EAAYsB,EAAZtB,IAAKQ,EAAOc,EAAPd,IACRA,EAAM,GAAG2B,EAAUZ,KAAKR,EAAKP,EAAM,GAAGR,IACtCQ,EAAMO,EAAKU,OAAS,GAAGU,EAAUZ,KAAKR,EAAKP,EAAM,GAAGR,IACpDA,EAAM,GAAGmC,EAAUZ,KAAKR,EAAKP,GAAKR,EAAM,IACxCA,EAAMe,EAAK,GAAGU,OAAS,GAAGU,EAAUZ,KAAKR,EAAKP,GAAKR,EAAM,IAC7D,OAAOmC,EAAUC,QAAO,SAAAC,GAAQ,OAAKA,EAAS5B,aAlBnB6B,CAAsBhB,EAAMP,GADX,uBAE5C,YAAuBmB,EAAvB,+CAA2C,CAAC,IAAjCG,EAAgC,QACrCf,EAAKlB,SACPiC,EAASlB,SAAWG,EAAKH,SAAW,EAEpCkB,EAASlB,SAAWG,EAAKH,SAAW,EAEtCkB,EAASE,aAAejB,GARkB,mFCvBvC,SAASkB,EAAoBzB,EAAMC,EAAWyB,EAASC,GAC5D,IAAMxB,EAAsB,GACtByB,EAAQ,GACd3B,EAAUP,WAAY,EACtBkC,EAAMpB,KAAKP,GACXA,EAAUG,SAAW,EAErB,IADA,IAAIG,EAAO,KACFqB,EAAMlB,QAAQ,CACrB,IAAMmB,EAAW,UAAOD,GAMxB,GALoBC,EA8DPb,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMb,SAAWc,EAAMd,YA7DvCyB,EAAYhB,QAIhBT,WAAaU,IAC3B,OAAOX,EAST,GANkB,qBAAdwB,EACFpB,EAAOqB,EAAME,MACU,uBAAdH,IACTpB,EAAOqB,EAAMf,UAGXN,EAAKnB,OAAT,CAOA,GAHAe,EAAoBK,KAAKD,GAGrBA,IAASmB,EACX,OAAOvB,EAGT,IAAMgB,EAAqBY,EAAaxB,EAAMP,GAC9CgC,EAAQb,GA7Ba,2BAgCrB,YAAuBA,EAAvB,+CAA2C,CAAC,IAAjCG,EAAgC,QACrCA,EAASlC,OACXwC,EAAMpB,KAAKc,GACDA,EAAS5B,WAAc4B,EAASlC,SAC1CkC,EAASE,aAAejB,EACxBe,EAASlB,SAAWG,EAAKH,SAAW,EACpCkB,EAAS5B,WAAY,EACrBkC,EAAMpB,KAAKc,KAvCM,qFA6CzB,SAASS,EAAaxB,EAAMP,GAC1B,IAAMoB,EAAY,GACXnC,EAAYsB,EAAZtB,IAAKQ,EAAOc,EAAPd,IAKZ,OAJIA,EAAM,GAAG2B,EAAUZ,KAAKR,EAAKP,EAAM,GAAGR,IACtCQ,EAAMO,EAAKU,OAAS,GAAGU,EAAUZ,KAAKR,EAAKP,EAAM,GAAGR,IACpDA,EAAM,GAAGmC,EAAUZ,KAAKR,EAAKP,GAAKR,EAAM,IACxCA,EAAMe,EAAK,GAAGU,OAAS,GAAGU,EAAUZ,KAAKR,EAAKP,GAAKR,EAAM,IACtDmC,EAAUC,QAAO,SAAAC,GAAQ,OAAKA,EAAS5B,aAGhD,SAASsC,EAAQC,GACf,IAAK,IAAIC,EAAID,EAAEvB,OAAS,EAAGwB,EAAI,EAAGA,IAAK,CACrC,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADL,EAEtB,CAACD,EAAEE,GAAIF,EAAEC,IAAvBD,EAAEC,GAFkC,KAE9BD,EAAEE,GAF4B,KAIvC,OAAOF,E,4CClCMM,G,MAjCA,WACb,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,+CACA,kBAAC,EAAD,CAAMvD,QAAQ,UAEhB,kBAACuD,EAAA,EAAD,KACE,6CACA,kBAAC,EAAD,CAAMxD,SAAS,UAEjB,kBAACwD,EAAA,EAAD,KACE,mDACA,kBAAC,EAAD,OAEF,kBAACA,EAAA,EAAD,KACE,iDACA,kBAAC,EAAD,CAAMhD,UAAU,UAElB,kBAACgD,EAAA,EAAD,KACE,8CACA,kBAAC,EAAD,CAAMtD,OAAO,UAEf,kBAACsD,EAAA,EAAD,KACE,gDACA,kBAAC,EAAD,CAAMrD,SAAS,cCtBnBsD,EAEF,iFAFEA,EAIF,yFAJEA,EAMF,mFA8IWC,EA3IF,SAAA5D,GACX,IAAI6D,EAAoB7D,EAAM6D,kBAC1BC,EAAuB,KAY3B,MAV0B,aAAtBD,EACFC,EAAuBH,EACQ,qBAAtBE,EACTC,EAAuBH,EACQ,uBAAtBE,EACTC,EAAuBH,EACQ,OAAtBE,IACTC,EAAuB,4CAIvB,kBAAC,IAAMC,SAAP,KACE,yBAAKlD,UAAU,QACb,yBACEmD,IAAI,0CACJC,MAAM,MACNC,OAAO,KACPC,IAAI,gBACJtD,UAAU,UAEZ,kBAAC2C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACU,EAAA,EAAD,KACE,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAU1D,GAAG,kBAAtC,0BAIA,kBAACwD,EAAA,EAASR,KAAV,KACE,kBAACQ,EAAA,EAASG,KAAV,CAAeC,QAAS,kBAAMxE,EAAMyE,aAAa,cAAjD,YAGA,kBAACL,EAAA,EAASG,KAAV,CACEC,QAAS,kBAAMxE,EAAMyE,aAAa,sBADpC,sBAKA,kBAACL,EAAA,EAASG,KAAV,CACEC,QAAS,kBAAMxE,EAAMyE,aAAa,wBADpC,2BAQN,kBAACf,EAAA,EAAD,KACE,kBAACU,EAAA,EAAD,KACE,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAU1D,GAAG,kBAAtC,iBAIA,kBAACwD,EAAA,EAASR,KAAV,KACE,kBAACQ,EAAA,EAASG,KAAV,CAAeC,QAAS,kBAAMxE,EAAM0E,iBAApC,gCAGA,kBAACN,EAAA,EAASG,KAAV,oBACA,kBAACH,EAAA,EAASG,KAAV,uBAIN,kBAACb,EAAA,EAAD,KACE,kBAACiB,EAAA,EAAD,CACEH,QAAS,kBAAMxE,EAAM4E,aACrBC,SAAU7E,EAAM8E,qBAFlB,eAOF,kBAACpB,EAAA,EAAD,KACE,kBAACiB,EAAA,EAAD,CACE9D,UAAU,SACV2D,QAAS,kBACPxE,EAAM+E,mBAAmB/E,EAAM6D,oBAEjCgB,SAAU7E,EAAM8E,oBAChBR,QAAQ,WANV,aAQatE,EAAM6D,oBAGrB,kBAACH,EAAA,EAAD,KACE,kBAACU,EAAA,EAAD,KACE,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAU1D,GAAG,kBAAtC,eAIA,kBAACwD,EAAA,EAASR,KAAV,KACE,kBAACQ,EAAA,EAASG,KAAV,CAAeC,QAAS,kBAAMxE,EAAMgF,QAAQ,YAA5C,UAGA,kBAACZ,EAAA,EAASG,KAAV,CACEC,QAAS,kBAAMxE,EAAMgF,QAAQ,OAC7BH,UAAW7E,EAAMiF,mBAFnB,eASN,kBAACvB,EAAA,EAAD,KACE,kBAACU,EAAA,EAAD,KACE,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAU1D,GAAG,kBAAtC,gBAIA,kBAACwD,EAAA,EAASR,KAAV,KACE,kBAACQ,EAAA,EAASG,KAAV,CACEC,QAAS,kBAAMxE,EAAMkF,SAASC,EAAeC,QAD/C,QAKA,kBAAChB,EAAA,EAASG,KAAV,CACEC,QAAS,kBAAMxE,EAAMkF,SAASC,EAAeE,UAD/C,UAKA,kBAACjB,EAAA,EAASG,KAAV,CACEC,QAAS,kBAAMxE,EAAMkF,SAASC,EAAeG,QAD/C,YASR,yBAAKzE,UAAU,wBACb,gCAASiD,MAIf,kBAAC,EAAD,CAAQjD,UAAU,aCxJpB0E,EAAY,CACdC,MAAO,EACPC,KAAM,GAGD,SAASC,EAAkB1E,GAChC,IAAM2E,EAAU3E,EAAK,GAAGU,OAClBkE,EAAO5E,EAAKU,OACdmE,EAAwB,GAW5B,OA2CF,SAA4B7E,EAAM4B,GAKhC,IAJA,IAAM+C,EAAU3E,EAAK,GAAGU,OAClBkE,EAAO5E,EAAKU,OAGTwB,EAAI,EAAGA,EAAIyC,EAASzC,IAC3BN,EAAMpB,KAAKR,EAAK,GAAGkC,IACnBN,EAAMpB,KAAKR,EAAK4E,EAAO,GAAG1C,IAI5B,IAAK,IAAIA,EAAI,EAAGA,EAAI0C,EAAM1C,IACxBN,EAAMpB,KAAKR,EAAKkC,GAAG,IACnBN,EAAMpB,KAAKR,EAAKkC,GAAGyC,EAAU,IAlE/BG,CAAmB9E,EAAM6E,GAa3B,SAAgB7E,EAAM+E,EAAGC,EAAGL,EAASC,EAAMK,EAAarD,GAEtD,GAAI+C,EAAU,GAAKC,EAAO,EACxB,OAuBF,IApBA,IAAIM,EAA6B,eAAhBD,EAGbE,EAAQJ,GAAKG,EAAa,EAAI9C,KAAKC,MAAMD,KAAKE,OAAOqC,EAAU,KAC/DS,EAAQJ,GAAKE,EAAa9C,KAAKC,MAAMD,KAAKE,OAAOsC,EAAO,IAAM,GAO9DS,GAJoBH,GAAa9C,KAAKC,MAAMD,KAAKE,OAAOqC,IACpCO,GAAiB9C,KAAKC,MAAMD,KAAKE,OAAOsC,IAG/CM,EAAa,EAAI,GAC9BI,EAAaJ,EAAa,EAAI,EAG9BxE,EAASwE,EAAaP,EAAUC,EAK3B1C,GAFCgD,EAAaX,EAAUC,MAAQD,EAAUE,KAEtC,GAAGvC,EAAIxB,EAAQwB,IAC1BN,EAAMpB,KAAKR,EAAKmF,GAAOC,IACvBD,GAASE,EACTD,GAASE,EAzCXC,CACEvF,EACA,EACA,EACA2E,EACAC,EAgEJ,SAA2BD,EAASC,GAClC,OAAID,EAAUC,EAAa,aAClBA,EAAOD,EAAgB,WACc,IAAlCvC,KAAKC,MAAMD,KAAKE,SAAW,GAAW,aAAe,WAlE/DkD,CAAkBb,EAASC,GAC3BC,GAEKA,E,UCTLY,EAAiB,GACjBC,EAAiB,GACjBC,EAAkB,GAClBC,EAAkB,GAGTzB,EAAiB,CAC5BC,KAAM,IACNC,OAAQ,GACRC,KAAM,IAGauB,E,YACnB,aAAe,IAAD,8BACZ,+CAcFC,kBAAoB,WAClB,IAAM9F,EAAO+F,IACb,EAAKC,SAAS,CAAChG,UAjBH,EAqBdiG,gBAAkB,SAACxG,EAAKR,GACtB,IAAIiH,EAAU,GACV,EAAKC,MAAMnG,KAAKP,GAAKR,GAAKE,SAC5B,EAAK6G,SAAS,CAACI,mBAAmB,IAClCF,EAAU,EAAKC,MAAMnG,MACZ,EAAKmG,MAAMnG,KAAKP,GAAKR,GAAKC,UACnC,EAAK8G,SAAS,CAACK,oBAAoB,IACnCH,EAAU,EAAKC,MAAMnG,MAErBkG,EAAUI,EACR,EAAKH,MAAMnG,KACXP,EACAR,EACA,EAAKkH,MAAMI,kBAGf,EAAKP,SAAS,CAAChG,KAAMkG,EAASM,gBAAgB,KArClC,EAwCdC,iBAAmB,SAAChH,EAAKR,GACvB,GAAK,EAAKkH,MAAMK,eAAhB,CAEA,IAAIN,EAAU,GAGZA,EADE,EAAKC,MAAMC,kBACHM,EAA2B,EAAKP,MAAMnG,KAAMP,EAAKR,GAClD,EAAKkH,MAAME,mBACVM,EAA4B,EAAKR,MAAMnG,KAAMP,EAAKR,GAGlDqH,EACR,EAAKH,MAAMnG,KACXP,EACAR,EACA,EAAKkH,MAAMI,kBAGf,EAAKP,SAAS,CAAChG,KAAMkG,MA1DT,EA6DdU,cAAgB,WACV,EAAKT,MAAMC,kBACb,EAAKJ,SAAS,CAACI,mBAAmB,IACzB,EAAKD,MAAME,oBACpB,EAAKL,SAAS,CAACK,oBAAoB,IAErC,EAAKL,SAAS,CAACQ,gBAAgB,KAnEnB,EAsEdK,iBAAmB,SAAC1G,EAAqB2G,GACvC,EAAKd,SAAS,CAAClC,qBAAqB,IACpC,IAFoE,eAE3D5B,GACP,GAAIA,IAAM/B,EAAoBO,OAI5B,OAHAqG,YAAW,WACT,EAAKC,oBAAoBF,KACxB,EAAKX,MAAMhC,eAAiBjC,GACzB,CAAN,UAEF6E,YAAW,WACT,IAAMxG,EAAOJ,EAAoB+B,GAC5B/B,EAAoBf,SACvB6H,SAASC,eAAT,eAAgC3G,EAAKd,IAArC,YAA4Cc,EAAKtB,MAAOY,UACtD,qBAEAU,EAAKpB,QACP8H,SAASC,eAAT,eAAgC3G,EAAKd,IAArC,YAA4Cc,EAAKtB,MAAOY,UACtD,+BACOU,EAAKrB,SACd+H,SAASC,eAAT,eAAgC3G,EAAKd,IAArC,YAA4Cc,EAAKtB,MAAOY,UACtD,gCACOU,EAAKlB,WACd4H,SAASC,eAAT,eAAgC3G,EAAKd,IAArC,YAA4Cc,EAAKtB,MAAOY,UACtD,oCAEH,EAAKsG,MAAMhC,eAAiBjC,IAvBxBA,EAAI,EAAGA,GAAK/B,EAAoBO,OAAQwB,IAAK,CAAC,IAAD,IAA7CA,GAA6C,oCAxE1C,EAmGd8E,oBAAsB,SAAAF,GACpB,IADiD,IAAD,WACvC5E,GACP6E,YAAW,WACT,IAAMxG,EAAOuG,EAAyB5E,GAEhCV,EAAejB,EAAKiB,aAEtB2F,EAAa,GAEI,OAAjB3F,KAC4B,IAA1BA,EAAanC,WAAmB8H,EAAa,iBAC7C3F,EAAa/B,IAAMc,EAAKd,KAC1BwH,SAASC,eAAT,eAAgC3G,EAAKd,IAArC,YAA4Cc,EAAKtB,MAAOY,UACtD,6BACFoH,SAASC,eAAT,eACU3G,EAAKd,IAAM,EADrB,YAC0Bc,EAAKtB,MAC7BY,UAAY,0BAA4BsH,GACjC3F,EAAa/B,IAAMc,EAAKd,KACjCwH,SAASC,eAAT,eAAgC3G,EAAKd,IAArC,YAA4Cc,EAAKtB,MAAOY,UACtD,+BACFoH,SAASC,eAAT,eACU3G,EAAKd,IAAM,EADrB,YAC0Bc,EAAKtB,MAC7BY,UAAY,0BAA4BsH,GACjC3F,EAAavC,IAAMsB,EAAKtB,KACjCgI,SAASC,eAAT,eAAgC3G,EAAKd,IAArC,YAA4Cc,EAAKtB,MAAOY,UACtD,+BACFoH,SAASC,eAAT,eACU3G,EAAKd,IADf,YACsBc,EAAKtB,IAAM,IAC/BY,UAAY,0BAA4BsH,IAE1CF,SAASC,eAAT,eAAgC3G,EAAKd,IAArC,YAA4Cc,EAAKtB,MAAOY,UACtD,gCACFoH,SAASC,eAAT,eACU3G,EAAKd,IADf,YACsBc,EAAKtB,IAAM,IAC/BY,UAAY,0BAA4BsH,MAG7C,GAAKjF,IApCDA,EAAI,EAAGA,EAAI4E,EAAyBpG,OAAQwB,IAAM,EAAlDA,GAsCT,EAAK8D,SAAS,CAAClC,qBAAqB,KA1IxB,EA6IdsD,0BAA4B,SAAAzF,GAAc,IACjC3B,EAAQ,EAAKmG,MAAbnG,KACPqH,QAAQC,IAAI,YAAatH,EAAK,GAAGU,QACjC2G,QAAQC,IAAI,SAAUtH,EAAKU,QAC3B,IAAMT,EAAYD,EAAKyF,GAAgBC,GACjCxF,EAAaF,EAAK2F,GAAiBC,GACrCzF,EAAsB,GAE1B,OAAQwB,GACN,IAAK,WACHxB,EAAsBJ,EAASC,EAAMC,EAAWC,GAChD,MACF,IAAK,mBACHC,EAAsBsB,EACpBzB,EACAC,EACAC,EACA,oBAEF,MACF,IAAK,qBACHC,EAAsBsB,EACpBzB,EACAC,EACAC,EACA,sBAMN,IAAM4G,ELrIH,SAAqC5G,GAG1C,IAFA,IAAM4G,EAA2B,GAC7BS,EAAcrH,EACK,OAAhBqH,GACLT,EAAyBU,QAAQD,GACjCA,EAAcA,EAAY/F,aAE5B,OAAOsF,EK8H4BW,CAA4BvH,GAC7D,EAAK2G,iBAAiB1G,EAAqB2G,IA7K/B,EAgLdY,iBAAmB,WACjBL,QAAQC,IAAI,QAEZ,IADA,IAAMpB,EAAUH,IACPtG,EAAM,EAAGA,EAAM,GAAIA,IAC1B,IAAK,IAAIR,EAAM,EAAGA,EAAM,GAAIA,IAExBgI,SAASC,eAAT,eAAgCzH,EAAhC,YAAuCR,IAAOY,UAD5CJ,IAAQgG,GAAkBxG,IAAQyG,EAElC,kBACOjG,IAAQkG,GAAmB1G,IAAQ2G,EAE1C,mBAEwD,OAIhE,EAAKI,SAAS,CAAChG,KAAMkG,KAhMT,EAmMdyB,oBAAsB,SAAAhG,GACpB,EAAK+F,mBACa,aAAd/F,EACF,EAAKqE,SAAS,CACZnD,kBAAmBlB,EACnBiG,6BAA6B,IAG/B,EAAK5B,SAAS,CACZnD,kBAAmBlB,EACnBiG,6BAA6B,KA7MrB,EAkNdC,gBAAkB,SAAAC,GAChB,EAAK9B,SAAS,CAAC7B,eAAgB2D,KAnNnB,EAsNdC,eAAiB,SAAAC,GACf,EAAKhC,SAAS,CAACO,iBAAkByB,KAvNrB,EA0NdC,oBAAsB,WAGpB,IAFA,IAAMC,EAAwBxD,EAAkB,EAAKyB,MAAMnG,MACrDkG,EAAO,YAAO,EAAKC,MAAMnG,MAFL,WAGjBkC,GACP6E,YAAW,WACT,IAAMxG,EAAO2H,EAAsBhG,GACnCgE,EAAQ3F,EAAKd,KAAKc,EAAKtB,KAAKG,QAAS,EACrC6H,SAASC,eAAT,eAAgC3G,EAAKd,IAArC,YAA4Cc,EAAKtB,MAAOY,UACtD,mBACD,GAAKqC,IANDA,EAAI,EAAGA,EAAIgG,EAAsBxH,OAAQwB,IAAM,EAA/CA,GAQT,EAAK8D,SAAS,CAAChG,KAAMkG,KAnOrB,EAAKC,MAAQ,CACXnG,KAAM,GACNwG,gBAAgB,EAChBJ,mBAAmB,EACnBC,oBAAoB,EACpBvC,qBAAqB,EACrBjB,kBAAmB,KACnB+E,4BAA6B,KAC7BzD,eAAgBA,EAAeG,KAC/BiC,iBAAkB,UAXR,E,sEAwOJ,IAAD,SACwBxH,KAAKoH,MAA7BnG,EADA,EACAA,KAAMwG,EADN,EACMA,eAEb,OACE,kBAAC,IAAMzD,SAAP,KACE,kBAAC,EAAD,CACEU,aAAc1E,KAAK4I,oBACnB5D,mBAAoBhF,KAAKqI,0BACzBxD,UAAW7E,KAAK2I,iBAChB5D,oBAAqB/E,KAAKoH,MAAMrC,oBAChCjB,kBAAmB9D,KAAKoH,MAAMtD,kBAC9BqB,SAAUnF,KAAK8I,gBACf1D,eAAgBpF,KAAKoH,MAAMhC,eAC3BH,QAASjF,KAAKgJ,eACd9D,kBAAmBlF,KAAKoH,MAAMyB,4BAC9BlE,aAAc3E,KAAKkJ,sBAErB,yBAAKpI,UAAU,QACZG,EAAKmI,KAAI,SAAC1I,EAAK2I,GACd,OACE,yBAAKC,IAAKD,GACP3I,EAAI0I,KAAI,SAAC5H,EAAM+H,GAAa,IACpB7I,EAAiDc,EAAjDd,IAAKR,EAA4CsB,EAA5CtB,IAAKC,EAAuCqB,EAAvCrB,SAAUC,EAA6BoB,EAA7BpB,QAASC,EAAoBmB,EAApBnB,OAAQC,EAAYkB,EAAZlB,SAC5C,OACE,kBAAC,EAAD,CACEgJ,IAAKC,EACLrJ,IAAKA,EACLC,SAAUA,EACVC,QAASA,EACTC,OAAQA,EACRC,SAAUA,EACVmH,eAAgBA,EAChBlH,YAAa,SAACG,EAAKR,GAAN,OAAc,EAAKgH,gBAAgBxG,EAAKR,IACrDM,aAAc,SAACE,EAAKR,GAAN,OACZ,EAAKwH,iBAAiBhH,EAAKR,IAE7BO,UAAW,kBAAM,EAAKoH,iBACtBnH,IAAKA,iB,GA9QwBK,aA2R7CiG,EAAiB,WAErB,IADA,IAAM/F,EAAO,GACJP,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAEjC,IADA,IAAM8I,EAAa,GACVtJ,EAAM,EAAGA,EAAM,GAAIA,IAC1BsJ,EAAW/H,KAAKgI,EAAWvJ,EAAKQ,IAElCO,EAAKQ,KAAK+H,GAEZ,OAAOvI,GAGHwI,EAAa,SAACvJ,EAAKQ,GACvB,MAAO,CACLR,MACAQ,MACAN,QAASM,IAAQgG,GAAkBxG,IAAQyG,EAC3CxG,SAAUO,IAAQkG,GAAmB1G,IAAQ2G,EAC7CxF,SAAUU,IACVpB,WAAW,EACXN,QAAQ,EACRC,UAAU,EACVmC,aAAc,KACdiH,mBAAoB,OAIlBnC,EAA4B,SAACtG,EAAMP,EAAKR,EAAKyJ,GACjD,IAAMxC,EAAUlG,EAAK2I,QACfpI,EAAO2F,EAAQzG,GAAKR,GACtB2J,EAAU,KAgBd,MAfiB,WAAbF,EACFE,EAAO,eACFrI,EADE,CAELnB,QAASmB,EAAKnB,OACdC,UAAU,IAEU,OAAbqJ,IACTrB,QAAQC,IAAI,aACZsB,EAAO,eACFrI,EADE,CAELnB,QAAQ,EACRC,UAAWkB,EAAKlB,YAGpB6G,EAAQzG,GAAKR,GAAO2J,EACb1C,GAGHQ,EAA6B,SAAC1G,EAAMP,EAAKR,GAC7C,IAAM4J,EAAepD,EACfqD,EAAepD,EACfQ,EAAUlG,EAAK2I,QAGAzC,EAAQ2C,GAAcC,GAC9B3J,SAAU,EAGvB,IAAMoB,EAAO2F,EAAQzG,GAAKR,GACpB8J,EAAY,eACbxI,EADa,CAEhBpB,SAAS,IAKX,OAHA+G,EAAQzG,GAAKR,GAAO8J,EACpBtD,EAAiBhG,EACjBiG,EAAiBzG,EACViH,GAGHS,EAA8B,SAAC3G,EAAMP,EAAKR,GAC9C,IAAM+J,EAAgBrD,EAChBsD,EAAgBrD,EAChBM,EAAUlG,EAAK2I,QAGAzC,EAAQ8C,GAAeC,GAC/B/J,UAAW,EAGxB,IAAMqB,EAAO2F,EAAQzG,GAAKR,GACpBiK,EAAa,eACd3I,EADc,CAEjBrB,UAAU,IAKZ,OAHAgH,EAAQzG,GAAKR,GAAOiK,EACpBvD,EAAkBlG,EAClBmG,EAAkB3G,EACXiH,G,MC5XMiD,MARf,WACE,OACE,yBAAKtJ,UAAU,OACb,kBAAC,EAAD,QCIcuJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzC,SAASC,eAAe,SD2H3C,kBAAmByC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3539e34c.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      is2xWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n      isVisited,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : is2xWall\r\n      ? 'node-2x-wall'\r\n      : isVisited\r\n      ? 'node-visited'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  startNode.isVisited = true;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    if (node.is2xWall) {\r\n      neighbor.distance = node.distance + 5;\r\n    } else {\r\n      neighbor.distance = node.distance + 1;\r\n    }\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// Performs either weightedAlgorithm or Breadth First Search algorithm;\r\n// returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function unweightedAlgorithm(grid, startNode, endNode, algorithm) {\r\n  const visitedNodesInOrder = [];\r\n  const stack = [];\r\n  startNode.isVisited = true;\r\n  stack.push(startNode);\r\n  startNode.distance = 0;\r\n  let node = null;\r\n  while (!!stack.length) {\r\n    const sortedStack = [...stack];\r\n    sortNodesByDistance(sortedStack);\r\n    const closestNode = sortedStack.shift();\r\n\r\n    //if closest node in sorted array is infinity, we know that the start node is trapped\r\n    //by walls\r\n    if (closestNode.distance === Infinity) {\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    if (algorithm === 'depthFirstSearch') {\r\n      node = stack.pop();\r\n    } else if (algorithm === 'breadthFirstSearch') {\r\n      node = stack.shift();\r\n    }\r\n\r\n    if (node.isWall) {\r\n      continue;\r\n    }\r\n\r\n    visitedNodesInOrder.push(node);\r\n\r\n    //end node is reached: return all nodes visited in order\r\n    if (node === endNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    const unvisitedNeighbors = getNeighbors(node, grid);\r\n    shuffle(unvisitedNeighbors);\r\n\r\n    //push all unvisited neighbors onto stack, and set link to previous node\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      if (neighbor.isWall) {\r\n        stack.push(neighbor);\r\n      } else if (!neighbor.isVisited && !neighbor.isWall) {\r\n        neighbor.previousNode = node;\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.isVisited = true;\r\n        stack.push(neighbor);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction shuffle(a) {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [a[i], a[j]] = [a[j], a[i]];\r\n  }\r\n  return a;\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n","import React from 'react';\r\nimport {Dropdown, Button, Container, Row, Col} from 'react-bootstrap';\r\nimport '../../PathfindingVisualizer/Node/Node.css';\r\nimport Node from '../../PathfindingVisualizer/Node/Node';\r\n\r\nconst Legend = () => {\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <strong>Start Node </strong>\r\n          <Node isStart=\"true\"></Node>\r\n        </Col>\r\n        <Col>\r\n          <strong>End Node </strong>\r\n          <Node isFinish=\"true\"></Node>\r\n        </Col>\r\n        <Col>\r\n          <strong>Unvisited Node </strong>\r\n          <Node></Node>\r\n        </Col>\r\n        <Col>\r\n          <strong>Visited Node </strong>\r\n          <Node isVisited=\"true\"></Node>\r\n        </Col>\r\n        <Col>\r\n          <strong>Wall Node </strong>\r\n          <Node isWall=\"true\"></Node>\r\n        </Col>\r\n        <Col>\r\n          <strong>Weight Node </strong>\r\n          <Node is2xWall=\"true\"></Node>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Legend;\r\n","import React from 'react';\r\nimport {Dropdown, Button, Container, Row, Col} from 'react-bootstrap';\r\nimport './Menu.css';\r\nimport {algorithmSpeed} from '../PathfindingVisualizer/PathfindingVisualizer';\r\nimport Legend from './Legend/Legend';\r\nimport '../PathfindingVisualizer/Node/Node.css';\r\nimport Node from '../PathfindingVisualizer/Node/Node';\r\n\r\n//descriptions for algorithm\r\nconst AlgorithmDescription = {\r\n  djikstra:\r\n    \"Djikstra's algorithm is a WEIGHTED algorithm and gauruntees the shortest path!\",\r\n  depthFirstSearch:\r\n    'Depth First Search is an UNWEIGHTED algorithm and does not gauruntee the shortest path',\r\n  breadthFirstSearch:\r\n    'Breadth First Search is an UNWEIGHTED algorithm and gauruntees the shortest path',\r\n};\r\n\r\nconst Menu = props => {\r\n  let algorithmSelected = props.algorithmSelected;\r\n  let algorithmDescription = null;\r\n\r\n  if (algorithmSelected === 'djikstra') {\r\n    algorithmDescription = AlgorithmDescription.djikstra;\r\n  } else if (algorithmSelected === 'depthFirstSearch') {\r\n    algorithmDescription = AlgorithmDescription.depthFirstSearch;\r\n  } else if (algorithmSelected === 'breadthFirstSearch') {\r\n    algorithmDescription = AlgorithmDescription.breadthFirstSearch;\r\n  } else if (algorithmSelected === null) {\r\n    algorithmDescription = 'Please choose an algorithm to visualize!';\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"menu\">\r\n        <img\r\n          src=\"https://images.cooltext.com/5368723.png\"\r\n          width=\"524\"\r\n          height=\"90\"\r\n          alt=\"Graph Visualz\"\r\n          className=\"title\"\r\n        />\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <Dropdown>\r\n                <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\r\n                  Choose Graph Algorithm\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item onClick={() => props.setAlgorithm('djikstra')}>\r\n                    Djikstra\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    onClick={() => props.setAlgorithm('depthFirstSearch')}\r\n                  >\r\n                    Depth First Search\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    onClick={() => props.setAlgorithm('breadthFirstSearch')}\r\n                  >\r\n                    Breadth First Search\r\n                  </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </Col>\r\n            <Col>\r\n              <Dropdown>\r\n                <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\r\n                  Generate Maze\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item onClick={() => props.generateMaze()}>\r\n                    Recursive Division Algorithm\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item>###########</Dropdown.Item>\r\n                  <Dropdown.Item>###########</Dropdown.Item>\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                onClick={() => props.resetGrid()}\r\n                disabled={props.algorithmInProgress}\r\n              >\r\n                Reset Grid\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                className=\"button\"\r\n                onClick={() =>\r\n                  props.visualizeAlgorithm(props.algorithmSelected)\r\n                }\r\n                disabled={props.algorithmInProgress}\r\n                variant=\"success\"\r\n              >\r\n                Visualize {props.algorithmSelected}\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              <Dropdown>\r\n                <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\r\n                  Select Wall\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item onClick={() => props.setWall('normal')}>\r\n                    Normal\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    onClick={() => props.setWall('2x')}\r\n                    disabled={!props.algorithmWeighted}\r\n                  >\r\n                    Weighted\r\n                  </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </Col>\r\n            <Col>\r\n              <Dropdown>\r\n                <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\r\n                  Select Speed\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item\r\n                    onClick={() => props.setSpeed(algorithmSpeed.SLOW)}\r\n                  >\r\n                    Slow\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    onClick={() => props.setSpeed(algorithmSpeed.MEDIUM)}\r\n                  >\r\n                    Medium\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    onClick={() => props.setSpeed(algorithmSpeed.FAST)}\r\n                  >\r\n                    Fast\r\n                  </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </Col>\r\n          </Row>\r\n          <div className=\"algorithmDescription\">\r\n            <strong>{algorithmDescription}</strong>\r\n          </div>\r\n        </Container>\r\n      </div>\r\n      <Legend className=\"legend\"></Legend>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","let direction = {\r\n  SOUTH: 1,\r\n  EAST: 2,\r\n};\r\n\r\nexport function recursiveDivision(grid) {\r\n  const columns = grid[0].length;\r\n  const rows = grid.length;\r\n  let wallsGeneratedInOrder = [];\r\n  generateOuterWalls(grid, wallsGeneratedInOrder);\r\n  divide(\r\n    grid,\r\n    1,\r\n    1,\r\n    columns,\r\n    rows,\r\n    chooseOrientation(columns, rows),\r\n    wallsGeneratedInOrder\r\n  );\r\n  return wallsGeneratedInOrder;\r\n}\r\n\r\nfunction divide(grid, x, y, columns, rows, orientation, stack) {\r\n  //base case: if width and height are 1\r\n  if (columns < 2 || rows < 2) {\r\n    return;\r\n  }\r\n\r\n  let horizontal = orientation === 'horizontal';\r\n\r\n  //where will walls be drawn from\r\n  let wallX = x + (horizontal ? 0 : Math.floor(Math.random(columns - 2)));\r\n  let wallY = y + (horizontal ? Math.floor(Math.random(rows - 2)) : 0);\r\n\r\n  //where the passage through the wall exist?\r\n  let passageX = wallX + (horizontal ? Math.floor(Math.random(columns)) : 0);\r\n  let passageY = wallY + (horizontal ? 0 : Math.floor(Math.random(rows)));\r\n\r\n  //what direction will the wall be drawn?\r\n  let directionX = horizontal ? 1 : 0;\r\n  let directionY = horizontal ? 0 : 1;\r\n\r\n  //how long will the wall be\r\n  let length = horizontal ? columns : rows;\r\n\r\n  //what direction is perpendicular to the wall?\r\n  let dir = horizontal ? direction.SOUTH : direction.EAST;\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    stack.push(grid[wallX][wallY]);\r\n    wallX += directionX;\r\n    wallY += directionY;\r\n  }\r\n\r\n  let nextX = x;\r\n  let nextY = y;\r\n  let nextColumns = horizontal ? columns : wallX - x + 1;\r\n  let nextRows = horizontal ? wallY - y + 1 : rows;\r\n\r\n  return stack;\r\n}\r\n\r\nfunction generateOuterWalls(grid, stack) {\r\n  const columns = grid[0].length;\r\n  const rows = grid.length;\r\n\r\n  //generate walls for first and last rows\r\n  for (let i = 0; i < columns; i++) {\r\n    stack.push(grid[0][i]);\r\n    stack.push(grid[rows - 1][i]);\r\n  }\r\n\r\n  //generate walls for first and last column\r\n  for (let i = 0; i < rows; i++) {\r\n    stack.push(grid[i][0]);\r\n    stack.push(grid[i][columns - 1]);\r\n  }\r\n}\r\n\r\nfunction chooseOrientation(columns, rows) {\r\n  if (columns < rows) return 'horizontal';\r\n  else if (rows < columns) return 'vertical';\r\n  else return Math.floor(Math.random() + 1) === 0 ? 'horizontal' : 'vertical';\r\n}\r\n","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport {unweightedAlgorithm} from '../algorithms/depthFirstSearch';\r\nimport Menu from '../Menu/Menu';\r\nimport {recursiveDivision} from '../maze/maze';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\n//constants to define start and finish node coordinates\r\nlet START_NODE_ROW = 10;\r\nlet START_NODE_COL = 15;\r\nlet FINISH_NODE_ROW = 10;\r\nlet FINISH_NODE_COL = 30;\r\n\r\n//enumeration to define algorithm animation (in ms)\r\nexport const algorithmSpeed = {\r\n  SLOW: 200,\r\n  MEDIUM: 75,\r\n  FAST: 20,\r\n};\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      startNodeSelected: false,\r\n      finishNodeSelected: false,\r\n      algorithmInProgress: false,\r\n      algorithmSelected: null,\r\n      isAlgorithmSelectedWeighted: null,\r\n      algorithmSpeed: algorithmSpeed.FAST,\r\n      wallTypeSelected: 'normal',\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  };\r\n\r\n  //handles either placing walls, or setting start and finish nodes\r\n  handleMouseDown = (row, col) => {\r\n    let newGrid = [];\r\n    if (this.state.grid[row][col].isStart) {\r\n      this.setState({startNodeSelected: true});\r\n      newGrid = this.state.grid;\r\n    } else if (this.state.grid[row][col].isFinish) {\r\n      this.setState({finishNodeSelected: true});\r\n      newGrid = this.state.grid;\r\n    } else {\r\n      newGrid = getNewGridWithWallToggled(\r\n        this.state.grid,\r\n        row,\r\n        col,\r\n        this.state.wallTypeSelected\r\n      );\r\n    }\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  };\r\n\r\n  handleMouseEnter = (row, col) => {\r\n    if (!this.state.mouseIsPressed) return;\r\n\r\n    let newGrid = [];\r\n    //selecting new start node\r\n    if (this.state.startNodeSelected) {\r\n      newGrid = updateGridWithNewStartNode(this.state.grid, row, col);\r\n    } else if (this.state.finishNodeSelected) {\r\n      newGrid = updateGridWithNewFinishNode(this.state.grid, row, col);\r\n    } else {\r\n      //placing walls\r\n      newGrid = getNewGridWithWallToggled(\r\n        this.state.grid,\r\n        row,\r\n        col,\r\n        this.state.wallTypeSelected\r\n      );\r\n    }\r\n    this.setState({grid: newGrid});\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    if (this.state.startNodeSelected) {\r\n      this.setState({startNodeSelected: false});\r\n    } else if (this.state.finishNodeSelected) {\r\n      this.setState({finishNodeSelected: false});\r\n    }\r\n    this.setState({mouseIsPressed: false});\r\n  };\r\n\r\n  animateAlgorithm = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    this.setState({algorithmInProgress: true});\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, this.state.algorithmSpeed * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        if (!visitedNodesInOrder.isWall) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n        if (node.isStart) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited node-start';\r\n        } else if (node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited node-finish';\r\n        } else if (node.is2xWall) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited node-2x-wall';\r\n        }\r\n      }, this.state.algorithmSpeed * i);\r\n    }\r\n  };\r\n\r\n  animateShortestPath = nodesInShortestPathOrder => {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n\r\n        const previousNode = node.previousNode;\r\n\r\n        let extraClass = '';\r\n        //get direction of previous node\r\n        if (previousNode !== null) {\r\n          if (previousNode.is2xWall === true) extraClass = ' node-2x-wall';\r\n          if (previousNode.row > node.row) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path up';\r\n            document.getElementById(\r\n              `node-${node.row + 1}-${node.col}`\r\n            ).className = 'node node-shortest-path' + extraClass;\r\n          } else if (previousNode.row < node.row) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path down';\r\n            document.getElementById(\r\n              `node-${node.row - 1}-${node.col}`\r\n            ).className = 'node node-shortest-path' + extraClass;\r\n          } else if (previousNode.col > node.col) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path left';\r\n            document.getElementById(\r\n              `node-${node.row}-${node.col + 1}`\r\n            ).className = 'node node-shortest-path' + extraClass;\r\n          } else {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path right';\r\n            document.getElementById(\r\n              `node-${node.row}-${node.col - 1}`\r\n            ).className = 'node node-shortest-path' + extraClass;\r\n          }\r\n        }\r\n      }, 50 * i);\r\n    }\r\n    this.setState({algorithmInProgress: false});\r\n  };\r\n\r\n  visualizeAlgorithmHandler = algorithm => {\r\n    const {grid} = this.state;\r\n    console.log('columns: ', grid[0].length);\r\n    console.log('rows: ', grid.length);\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    let visitedNodesInOrder = [];\r\n\r\n    switch (algorithm) {\r\n      case 'djikstra':\r\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        break;\r\n      case 'depthFirstSearch':\r\n        visitedNodesInOrder = unweightedAlgorithm(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          'depthFirstSearch'\r\n        );\r\n        break;\r\n      case 'breadthFirstSearch':\r\n        visitedNodesInOrder = unweightedAlgorithm(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          'breadthFirstSearch'\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  };\r\n\r\n  resetGridHandler = () => {\r\n    console.log('fdsa');\r\n    const newGrid = getInitialGrid();\r\n    for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n        if (row === START_NODE_ROW && col === START_NODE_COL) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            'node node-start';\r\n        } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            'node node-finish';\r\n        } else {\r\n          document.getElementById(`node-${row}-${col}`).className = 'node';\r\n        }\r\n      }\r\n    }\r\n    this.setState({grid: newGrid});\r\n  };\r\n\r\n  setAlgorithmHandler = algorithm => {\r\n    this.resetGridHandler();\r\n    if (algorithm === 'djikstra') {\r\n      this.setState({\r\n        algorithmSelected: algorithm,\r\n        isAlgorithmSelectedWeighted: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        algorithmSelected: algorithm,\r\n        isAlgorithmSelectedWeighted: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  setSpeedHandler = speed => {\r\n    this.setState({algorithmSpeed: speed});\r\n  };\r\n\r\n  setWallHandler = wall => {\r\n    this.setState({wallTypeSelected: wall});\r\n  };\r\n\r\n  generateMazeHandler = () => {\r\n    const generatedWallsInOrder = recursiveDivision(this.state.grid);\r\n    const newGrid = [...this.state.grid];\r\n    for (let i = 0; i < generatedWallsInOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = generatedWallsInOrder[i];\r\n        newGrid[node.row][node.col].isWall = true;\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-wall';\r\n      }, 15 * i);\r\n    }\r\n    this.setState({grid: newGrid});\r\n  };\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Menu\r\n          setAlgorithm={this.setAlgorithmHandler}\r\n          visualizeAlgorithm={this.visualizeAlgorithmHandler}\r\n          resetGrid={this.resetGridHandler}\r\n          algorithmInProgress={this.state.algorithmInProgress}\r\n          algorithmSelected={this.state.algorithmSelected}\r\n          setSpeed={this.setSpeedHandler}\r\n          algorithmSpeed={this.state.algorithmSpeed}\r\n          setWall={this.setWallHandler}\r\n          algorithmWeighted={this.state.isAlgorithmSelectedWeighted}\r\n          generateMaze={this.generateMazeHandler}\r\n        ></Menu>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall, is2xWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      is2xWall={is2xWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    is2xWall: false,\r\n    previousNode: null,\r\n    animationDirection: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col, wallType) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  let newNode = null;\r\n  if (wallType === 'normal') {\r\n    newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n      is2xWall: false,\r\n    };\r\n  } else if (wallType === '2x') {\r\n    console.log('FDSAFDSAF');\r\n    newNode = {\r\n      ...node,\r\n      isWall: false,\r\n      is2xWall: !node.is2xWall,\r\n    };\r\n  }\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst updateGridWithNewStartNode = (grid, row, col) => {\r\n  const prevStartRow = START_NODE_ROW;\r\n  const prevStartCol = START_NODE_COL;\r\n  const newGrid = grid.slice();\r\n\r\n  //set old start node to normal node\r\n  const oldStartNode = newGrid[prevStartRow][prevStartCol];\r\n  oldStartNode.isStart = false;\r\n\r\n  //set new start node\r\n  const node = newGrid[row][col];\r\n  const newStartNode = {\r\n    ...node,\r\n    isStart: true,\r\n  };\r\n  newGrid[row][col] = newStartNode;\r\n  START_NODE_ROW = row;\r\n  START_NODE_COL = col;\r\n  return newGrid;\r\n};\r\n\r\nconst updateGridWithNewFinishNode = (grid, row, col) => {\r\n  const prevFinishRow = FINISH_NODE_ROW;\r\n  const prevFinishCol = FINISH_NODE_COL;\r\n  const newGrid = grid.slice();\r\n\r\n  //set old finish node to normal node\r\n  const oldStartNode = newGrid[prevFinishRow][prevFinishCol];\r\n  oldStartNode.isFinish = false;\r\n\r\n  //set new finish node\r\n  const node = newGrid[row][col];\r\n  const newFinishNode = {\r\n    ...node,\r\n    isFinish: true,\r\n  };\r\n  newGrid[row][col] = newFinishNode;\r\n  FINISH_NODE_ROW = row;\r\n  FINISH_NODE_COL = col;\r\n  return newGrid;\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}